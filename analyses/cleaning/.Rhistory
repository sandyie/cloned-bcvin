library(swirl)
swirl()
library(dplyr)
cran <- tbl_df(mydf)
rm("mydf")
cran
?group_by
by_package <- group_by(cran, package)
by_package
summarize(by_package, mean(size))
submit()
pack_sum
quantile(pack_sum$count, probs = 0.99)
top_counts <- filter(pack_sum, count > 679)
top_counts
View(top_counts)
top_counts_sorted <- arrange(desc(count))
top_counts_sorted <- desc(count)
?arrange
top_counts_sorted <- desc(top_counts, count)
top_counts_sorted <- arrange(top_counts, desc(count)
)
View(top_counts_sorted)
quantile(pack_sum$unique, probs = 0.99)
top_unique <- filter(pack_sum, unique > 465)
View(top_unique)
top_unique_sorted <- arrange(top_unique, desc(unique))
View(top_unique_sorted)
submit()
submit()
submit()
View
View(result3)
submit()
submit()
cran %>%
select(ip_id, country, package, size) %>%
mutate(size_mb, size / 2^ 20) %>%
print
cran %>%
select(ip_id, country, package, size) %>%
mutate(size_mb = size / 2^ 20) %>%
print
submit()
cran %>%
select(ip_id, country, package, size) %>%
mutate(size_mb = size / 2^20) %>%
filter(size_mb <= 0.5) %>%
print
submit()
submit()
library(tidyr)
students
?gather
gather(students, sex, count, -grade)
students2
res <- gather(students2, sex_class, count)
res <- gather(students2, sex_class, count, -grade)
res
?separate
separate(res, sex_class, into = c("sex", "class"))
submit()
submit()
students3
submit()
submit()
submit()
?spread
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
reset()
swirl()
submit()
submit()
}"
}"
]''
]''
]['']
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
library(readr)
parse_number(class5)
parse_number("class5")
submit()
submit()
submit()
students4
submit()
submit()
submit()
passed
failed
mutate(passed, status = "passed")
passed <- passed % mutate(status = "passed")
passed <- passed %>% mutate(status = "passed")
failed <- failed %>% mutate(status = "failed")
bind_rows(passed, failed)
sat
submit()
submit()
submit()
submit()
Sys.getlocale("LC_TIME")
library(lubridate)
help(package = "lubridate")
help(package = lubridate)
today()
this_day <- today()
this_day
year(this_day)
wday(this_day)
wday(this_day, label = TRUE)
this_moment <- now()
this_moment
second(this_moment)
my_date <- ymd("1985-05-17")
my_date <- ymd("1989-05-17")
my_date
class(my_date)
ymd("1989 May 17")
mdy("March 12, 1975")
dmy(25081985)
ymd("192012")
ymd("1920-1-2")
dt1
ymd_hms(dt1)
hms("03:22:14")
dt2
ymd(dt2)
update(this_moment, hours = 8, minutes = 34, seconds =55)
this_moment
this_moment <- update(this_moment, hours = 20, minutes = 33)
this_moment
nyc <- now("America/New_York")
nyc
depart <- nyc + days(2)
depart
depart <- update(depart, hours = 17, minutes = 34)
depart
arrive <- depart + hours(15) + minutes(50)
?with_tz
arrive <- with_tz(arrive, tzone = "Asia/Hong_Kong")
arrive
last_time <- mdy("June 17, 2008", tz = "Singapore")
last_time
?interval
how_long <- interval(last_time, arrive)
as.period(how_long)
stopwatch()
q()
library(Amelia)
library(VIM)
all_data <- read.csv("/Users/miragarner/Documents/STAT547N/dive_40d_allc.csv")
dives <- all_data[2:9] #just the columns we are interested in
prop.mcar10 = .1  # 10% missingness
mcar10 <- runif(length(dives[,6]), min=0, max=1)
maxDepth_mcar10 <- ifelse(mcar10<prop.mcar10, NA, dives$max_depth)
dives_mcar10 <- dives
dives_mcar10$max_depth <- maxDepth_mcar10
prop.mcar30 = 0.3  # 30% missingness
mcar30 <- runif(length(dives[,6]), min=0, max=1)
maxDepth_mcar30 <- ifelse(mcar30<prop.mcar30, NA, dives$max_depth)
dives_mcar30 <- dives
dives_mcar30$max_depth <- maxDepth_mcar30
prop.mcar50 = 0.5  # 50% missingness
mcar50 <- runif(length(dives[,6]), min=0, max=1)
maxDepth_mcar50 <- ifelse(mcar50<prop.mcar50, NA, dives$max_depth)
dives_mcar50 <- dives
dives_mcar50$max_depth <- maxDepth_mcar50
dives_mar10 <- dives #10% missingness
dives_mar10[dives_mar10$td_dive_duration > 220, "max_depth"] <- NA
dives_mar30 <- dives #30% missingness
dives_mar30[dives_mar30$td_dive_duration > 160, "max_depth"] <- NA
dives_mar50 <- dives #50% missingness
dives_mar50[dives_mar50$td_dive_duration > 130, "max_depth"] <- NA
#check missingess percentages
#aggr10 <- aggr(dives_mar10, numbers=TRUE, sortVars=TRUE)
#aggr30 <- aggr(dives_mar30, numbers=TRUE, sortVars=TRUE)
#aggr50 <- aggr(dives_mar50, numbers=TRUE, sortVars=TRUE)
dives.n <- dives
prop.mnar10 = 0.1 #10% missingness
sort10 <- sort(dives.n$max_depth, decreasing = TRUE)
mnar10 <- sort10[ceiling(prop.mnar10*length(dives.n$max_depth))]
depth.mnar10 <- ifelse(dives.n$max_depth > mnar10, NA, dives.n$max_depth)
dives_mnar10 <- dives
dives_mnar10$max_depth <- depth.mnar10
prop.mnar30 = 0.3 # 30% missingness
sort30 <- sort(dives.n$max_depth, decreasing = TRUE)
mnar30 <- sort30[ceiling(prop.mnar30*length(dives.n$max_depth))]
depth.mnar30 <- ifelse(dives.n$max_depth > mnar30, NA, dives.n$max_depth)
dives_mnar30 <- dives
dives_mnar30$max_depth <- depth.mnar30
prop.mnar50 = 0.5 # 50% missingness
sort50 <- sort(dives.n$max_depth, decreasing = TRUE)
mnar50 <- sort50[ceiling(prop.mnar50*length(dives.n$max_depth))]
depth.mnar50 <- ifelse(dives.n$max_depth > mnar50, NA, dives.n$max_depth)
dives_mnar50 <- dives
dives_mnar50$max_depth <- depth.mnar50
ls_dives <- c("dives_mcar10", "dives_mcar30", "dives_mcar50", "dives_mar10", "dives_mar30", "dives_mar50", "dives_mnar10", "dives_mnar30", "dives_mnar50")
set.seed(999)
divesA <- amelia(dives_mcar10, m=100, parallel="multicore")
i <- 0
mylist<-list() #initialize list
for (d in divesA) {
i <- i+1
divesK <- kmeans(d, center = 3)
m <- as.numeric(unlist(divesK))
mylist[[i]] <- m #add each element to list
}
for (d in divesA) {
i <- i+1
divesK <- kmeans(d, center = 3)
m <- unlist(as.numeric(divesK))
mylist[[i]] <- m #add each element to list
}
ls_dives <- c(dives_mcar10, dives_mcar30, dives_mcar50, dives_mar10, dives_mar30, dives_mar50, dives_mnar10, dives_mnar30, dives_mnar50)
plot(divesA)
install.packages(c("psycho", "tidyverse"))
start <- Sys.time() # start timer
i = 0
mylist <- list()
for(d in ls_dives) {
i = i + 1
divesA <- amelia(dives_mcar10, m=100, parallel="multicore")
divesAimp <- divesA$imputations[[1]]
divesAkmeans <- kmeans(divesAimp, 3)
divesAkmeansClusters <- divesAkmeans$cluster
mylist[i] = divesAkmeansClusters
}
end <- Sys.time()
timer <- end - start
timer
for (m in mylist) {
write.csv(m)
}
for (i in mylist) {
write.csv(i, file = "i.csv")
}
# Arterra_Veraison phenological data cleaning
setwd("/Users/miragarner/Documents/git/bcvin/analyses/cleaning")
art_veraison <- read.csv("/Users/miragarner/Documents/git/bcvin/analyses/input/Arterra_Veraison.csv")
# Add company column
company <- "Arterra"
veraison1 <- cbind(art_veraison, company)
# Need to get year column from separate year columns
veraison2 <- melt(veraison1, id.var=c("Variety", "Block", "Vineyard")) #Regular expressions
library(reshape2)
# Need to get year column from separate year columns
veraison2 <- melt(veraison1, id.var=c("Variety", "Block", "Vineyard")) #Regular expressions
tail(veraison2)
head(veraison1)
# Need to get year column from separate year columns
veraison2 <- melt(veraison1, id.var=c("Variety", "Block", "Vineyard", "Company")) #Regular expressions
# Need to get year column from separate year columns
veraison2 <- melt(veraison1, id.var=c("Variety", "Block", "Vineyard", "company")) #Regular expressions
tail(veraison2)
head(veraison1)
