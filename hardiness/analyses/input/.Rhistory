}
}
currentTemps_dormancy
climate1981to2010_2
#this loop takes a little to long run. May need some tweaking with how the data is stored once implemented into the app
for(year in year1:CurrentYear){ #retrieves data from 2013 up to yesterday
if(year != CurrentYear){
scrape_mean_penticton_temp(12, year)
}else{
scrape_mean_penticton_temp(CurrentMonth, year)
}
combine_monthly_temps(12, year)
}
CurrentMonth <- str_extract(Sys.Date(), "-[0-9]+-") %>% #if you want to change this to a user input for a Shiny server etc. just make a reactive option instead of Sys.Date()
str_remove_all(., "-") %>%
as.numeric()
CurrentYear <- str_extract(Sys.Date(), "[0-9][0-9][0-9][0-9]") %>%
as.numeric()
year1 <- 2013
year2 <- 2019
url_start <- "https://climate.weather.gc.ca/climate_data/daily_data_e.html?hlyRange=2012-01-01|2020-07-15&dlyRange=2012-05-10|2020-07-15&mlyRange=|&StationID=50269&Prov=BC&urlExtension=_e.html&searchType=stnName&optLimit=yearRange&StartYear=1840&EndYear=2020&selRowPerPage=50&Line=1&searchMethod=contains&Month="
url_end <- "&Day=15&timeframe=2&Year="
#this loop takes a little to long run. May need some tweaking with how the data is stored once implemented into the app
for(year in year1:CurrentYear){ #retrieves data from 2013 up to yesterday
if(year != CurrentYear){
scrape_mean_penticton_temp(12, year)
}else{
scrape_mean_penticton_temp(CurrentMonth, year)
}
combine_monthly_temps(12, year)
}
combine_years_temps(2013, CurrentYear-1, CurrentMonth)
dates <- as.data.frame(seq(as.Date("2013-01-01"), by = 1, len = nrow(meanTempsToDate)))
colnames(dates)[1] <- "date"
meanTempsToDate_1 <- meanTempsToDate %>%
arrange(year) %>%
bind_cols(., dates)
meanTempsToDate_1$month <- format(as.Date(meanTempsToDate_1$date), "%m")
meanTempsToDate_1$day <- format(as.Date(meanTempsToDate_1$date), "%d")
meanTempsToDate_1$tdiff <- rep(0, nrow(meanTempsToDate_1)) #initiated for the next for loop
meanTempsToDate_1$twoDayAvg <- rep(0, nrow(meanTempsToDate_1))
meanTempsToDate_1$day <- as.numeric(meanTempsToDate_1$day)
meanTempsToDate_1$month <- as.numeric(meanTempsToDate_1$month)
for(i in 1:nrow(meanTempsToDate_1)){
if(i == 1){
meanTempsToDate_1$twoDayAvg[1] <- meanTempsToDate_1$avgTemp[1]
}else if(is.na(meanTempsToDate_1$avgTemp[i])){
meanTempsToDate_1$twoDayAvg[i] <- NA
}else if(is.na(meanTempsToDate_1$twoDayAvg[i-1])){
meanTempsToDate_1$twoDayAvg[i] <- meanTempsToDate_1$avgTemp[i]
}else{
meanTempsToDate_1$twoDayAvg[i] <- (meanTempsToDate_1$avgTemp[i] + meanTempsToDate_1$avgTemp[i-1]) / 2
}
}
feb29th <- tibble(year = c(2013:2015, 2017:(CurrentYear - 1)), month = 2, day = 29, twoDayAvg = 0, tdiff = 0)#accounting for non leap years
meanTempsToDate_1
meanTempsToDate_write <- bind_rows(meanTempsToDate_1, feb29th)
write.csv(meanTempsToDate_write, "meanTemps2013toLastYear.csv")
#Data manipulation
historicTemps <- read_csv("meanTemps2013toLastYear.csv")
historicTemps
dates <- as.data.frame(seq(as.Date(paste0(CurrentYear - 1, "-01-01")), by = 1, len = nrow(meanTempsToDate)))
colnames(dates)[1] <- "date"
meanTempsToDate_1 <- meanTempsToDate %>%
arrange(year) %>%
bind_cols(., dates)
meanTempsToDate_1$month <- format(as.Date(meanTempsToDate_1$date), "%m")
meanTempsToDate_1$day <- format(as.Date(meanTempsToDate_1$date), "%d")
meanTempsToDate_1$tdiff <- rep(0, nrow(meanTempsToDate_1)) #initiated for the next for loop
meanTempsToDate_1$twoDayAvg <- rep(0, nrow(meanTempsToDate_1))
meanTempsToDate_1$day <- as.numeric(meanTempsToDate_1$day)
meanTempsToDate_1$month <- as.numeric(meanTempsToDate_1$month)
##Scraping Data from this and last year
scrape_mean_penticton_temp(12, CurrentYear-1)
combine_monthly_temps(12, CurrentYear - 1)
scrape_mean_penticton_temp(CurrentMonth, CurrentYear)
combine_monthly_temps(12, CurrentYear)
combine_years_temps(CurrentYear - 1, CurrentYear, CurrentMonth)
dates <- as.data.frame(seq(as.Date(paste0(CurrentYear - 1, "-01-01")), by = 1, len = nrow(meanTempsToDate)))
colnames(dates)[1] <- "date"
meanTempsToDate_1 <- meanTempsToDate %>%
arrange(year) %>%
bind_cols(., dates)
meanTempsToDate_1$month <- format(as.Date(meanTempsToDate_1$date), "%m")
meanTempsToDate_1$day <- format(as.Date(meanTempsToDate_1$date), "%d")
meanTempsToDate_1$tdiff <- rep(0, nrow(meanTempsToDate_1)) #initiated for the next for loop
meanTempsToDate_1$twoDayAvg <- rep(0, nrow(meanTempsToDate_1))
meanTempsToDate_1$day <- as.numeric(meanTempsToDate_1$day)
meanTempsToDate_1$month <- as.numeric(meanTempsToDate_1$month)
#calculating twoDayAverage
for(i in 1:nrow(meanTempsToDate_1)){
if(i == 1){
meanTempsToDate_1$twoDayAvg[1] <- meanTempsToDate_1$avgTemp[1]
}else if(is.na(meanTempsToDate_1$avgTemp[i])){
meanTempsToDate_1$twoDayAvg[i] <- NA
}else if(is.na(meanTempsToDate_1$twoDayAvg[i-1])){
meanTempsToDate_1$twoDayAvg[i] <- meanTempsToDate_1$avgTemp[i]
}else{
meanTempsToDate_1$twoDayAvg[i] <- (meanTempsToDate_1$avgTemp[i] + meanTempsToDate_1$avgTemp[i-1]) / 2
}
}
meanTempsToDate_1
view(meanTempsToDate_1)
#this should save all of the historic data once the new year is reached
allMeanTemps <- bind_rows(historicTemps, meanTempsToDate_1 %>% filter(year == CurrentYear))
allMeanTemps
currentTemps_dormancy <- allMeanTemps %>% filter(year == CurrentYear) %>%
filter(month > 8) %>%
filter(!(month == 9 & day <= 14))
currentTemps <- allMeanTemps %>%
filter(year == CurrentYear)
if(((CurrentMonth == 9 & CurrentDay > 14) & CurrentMonth <= 12) | (CurrentMonth > 9 & CurrentMonth <= 12)){
currentTemps_dormancy <- allMeanTemps %>% filter(year == CurrentYear) %>%
filter(month > 8) %>%
filter(!(month == 9 & day <= 14))
}else if((CurrentMonth >= 1 & CurrentMonth < 5)){
currentTemps_dormancy <- allMeanTemps %>% filter(year == CurrentYear | year == (CurrentYear - 1)) %>%
filter((year == CurrentYear & month < 5) | (year == (CurrentYear - 1) & month > 8)) %>%
filter(!(month == 9 & day <= 14)) %>%
filter(!(month == 4 & day >= 16))
}else{
currentTemps_dormancy <- NA
}
currentTemps_dormancy
CurrentMonth <- 10
CurrentYear <- 2019
CurrentYear <- 2020
CurrentMonth <- 2
if(((CurrentMonth == 9 & CurrentDay > 14) & CurrentMonth <= 12) | (CurrentMonth > 9 & CurrentMonth <= 12)){
currentTemps_dormancy <- allMeanTemps %>% filter(year == CurrentYear) %>%
filter(month > 8) %>%
filter(!(month == 9 & day <= 14))
}else if((CurrentMonth >= 1 & CurrentMonth < 5)){
currentTemps_dormancy <- allMeanTemps %>% filter(year == CurrentYear | year == (CurrentYear - 1)) %>%
filter((year == CurrentYear & month < 5) | (year == (CurrentYear - 1) & month > 8)) %>%
filter(!(month == 9 & day <= 14)) %>%
filter(!(month == 4 & day >= 16))
}else{
currentTemps_dormancy <- NA
}
currentTemps_dormancy
if(!is.na(currentTemps_dormancy)[1]){
for(i in 1:nrow(currentTemps_dormancy)){
m <- currentTemps_dormancy$month[i]
d <- currentTemps_dormancy$day[i]
diff <- currentTemps_dormancy$twoDayAvg[i] - climate1981to2010_2$twoDayAvg[climate1981to2010_2$month == m & climate1981to2010_2$day == d]
if(is.na(diff)){
currentTemps_dormancy$tdiff[i] <- 0
}else{
currentTemps_dormancy$tdiff[i] <- diff
}
}
}
currentTemps_dormancy
#calculating Tdiff
if(!is.na(currentTemps_dormancy[1]) | !is.na(currentTemps_dormancy[2])){
for(i in 1:nrow(currentTemps_dormancy)){
m <- currentTemps_dormancy$month[i]
d <- currentTemps_dormancy$day[i]
diff <- currentTemps_dormancy$twoDayAvg[i] - climate1981to2010_2$twoDayAvg[climate1981to2010_2$month == m & climate1981to2010_2$day == d]
if(is.na(diff)){
currentTemps_dormancy$tdiff[i] <- 0
}else{
currentTemps_dormancy$tdiff[i] <- diff
}
}
}
#calculating Tdiff
if(!is.na(currentTemps_dormancy)[1] | !is.na(currentTemps_dormancy)[2]){
for(i in 1:nrow(currentTemps_dormancy)){
m <- currentTemps_dormancy$month[i]
d <- currentTemps_dormancy$day[i]
diff <- currentTemps_dormancy$twoDayAvg[i] - climate1981to2010_2$twoDayAvg[climate1981to2010_2$month == m & climate1981to2010_2$day == d]
if(is.na(diff)){
currentTemps_dormancy$tdiff[i] <- 0
}else{
currentTemps_dormancy$tdiff[i] <- diff
}
}
}
meanTempsToDate_dormancy_1<- meanTempsToDate_dormancy %>%
filter(daynum >= 1 & daynum <= 176) %>%
unnest(., daynum)
meanTempsToDate_dormancy$daynum <- calculate_day_v(meanTempsToDate_dormancy$day, meanTempsToDate_dormancy$month)
meanTempsToDate_dormancy_1<- meanTempsToDate_dormancy %>%
filter(daynum >= 1 & daynum <= 176) %>%
unnest(., daynum)
meanTempsToDate_dormancy_daynum <- unnest(meanTempsToDate_dormancy_1, daynum)
meanTempsToDate_dormancy_daynum\
currentTemps_dormancy$daynum <- calculate_day_v(currentTemps_dormancy$day, currentTemps_dormancy$month)
currentTemps_dormancy_1<- currentTemps_dormancy %>%
filter(daynum >= 1 & daynum <= 176) %>%
unnest(., daynum)
currentTemps_dormancy_daynum <- unnest(currentTemps_dormancy_1, daynum)
currentTemps_dormancy_daynum
runApp('C:/Ecology Lab/R/bcvin_git/bcvin/hardiness/dashboard/hardinessDashboard')
currentTemps_dormancy_1
view(currentTemps_dormancy_1)
diff
LTE <- c(1:176) %>%
as_tibble() %>%
mutate(estLTE = estimateLTE(value)) %>%
select(day = value, estLTE)
LTE
value
?estimateLTE
LTE <- c(1:176) %>%
as_tibble() %>%
mutate(estLTE = estimateLTE(value)) %>%
select(day = value, estLTE)
estimateLTEperday(LTE$estLTE)
estimatedLTE <- bind_cols(LTE, LTEperday)
estimatedLTE
estimatedLTE1
historicTemps
unique(historicTemps$years)
unique(historicTemps$year)
historicGDDsums <- data.frame(GDD = c(rep(0,length(unique(historicTemps$year)))), year = (unique(historicTemps$year)[1]):(unique(historicTemps$year)[length(unique(historicTemps$year))]))
index <- 1
for(i in (unique(historicTemps$year)[1]):(unique(historicTemps$year)[length(unique(historicTemps$year))])){
historicGDDsums$GDD[index] <- sum(unlist(aboveThresholdTemp_v(meanTempsToDate_1 %>% filter(year == i) %>% select(twoDayAvg) %>% .[[1]], 10)))
historiccGDDsums$year[index] <- i
index <- index + 1
}
historicTemps
historicTemps <- historicTemps %>%
select(!(.[[1]]))
historicTemps <- historicTemps %>%
select(-(.[[1]]))
historicTemps
historicTemps <- historicTemps %>%
select(-(X1))
historicTemps
for(i in (unique(historicTemps$year)[1]):(unique(historicTemps$year)[length(unique(historicTemps$year))])){
historicGDDsums$GDD[index] <- sum(unlist(aboveThresholdTemp_v(historicTemps %>% filter(year == i) %>% select(twoDayAvg) %>% .[[1]], 10)))
historicGDDsums$year[index] <- i
index <- index + 1
}
historicGDDsums
historicAverageGDD <- mean(historicGDDsums$GDD)
Sep20_yearly <- data.frame("sep20" = calculate_Sep20_v(historicAverageGDD, historicGDDsums$GDD),
"year" = c(2013:CurrentYear))
Sep20_yearly <- data.frame("sep20" = calculate_Sep20_v(historicAverageGDD, historicGDDsums$GDD),
"year" = c((unique(historicTemps$year)[1]):(unique(historicTemps$year)[length(unique(historicTemps$year))])))
Sep20_yearly
test <- Sep20_yearly
GDDsums <- data.frame(GDD = c(rep(0,length(2013:(CurrentYear)))), year = 2013:(CurrentYear))
index <- 1
for(i in 2013:CurrentYear){
GDDsums$GDD[index] <- sum(unlist(aboveThresholdTemp_v(meanTempsToDate_1 %>% filter(year == i) %>% select(twoDayAvg) %>% .[[1]], 10)))
GDDsums$year[index] <- i
index <- index + 1
}
###Loading and preparing data for the model.
setwd("C:/Ecology Lab/R/bcvin_git/bcvin/hardiness/analyses/input")
climate1981to2010 <- read_csv("climhist_19812010.csv", col_names = FALSE)
climate1981to2010_1 <- climate1981to2010 %>%
select(date = X1, twoDayAvg = X3) %>%
.[-1,]
climate1981to2010_2 <- climate1981to2010_1 %>%
mutate(day = getDay(date), month = sapply(date, getMonthNum, USE.NAMES = FALSE)) %>%
select(day, month, twoDayAvg, date) %>%
type_convert()
CurrentMonth <- str_extract(Sys.Date(), "-[0-9]+-") %>% #if you want to change this to a user input for a Shiny server etc. just make a reactive option instead of Sys.Date()
str_remove_all(., "-") %>%
as.numeric()
CurrentYear <- str_extract(Sys.Date(), "[0-9][0-9][0-9][0-9]") %>%
as.numeric()
year1 <- 2013
year2 <- 2019
url_start <- "https://climate.weather.gc.ca/climate_data/daily_data_e.html?hlyRange=2012-01-01|2020-07-15&dlyRange=2012-05-10|2020-07-15&mlyRange=|&StationID=50269&Prov=BC&urlExtension=_e.html&searchType=stnName&optLimit=yearRange&StartYear=1840&EndYear=2020&selRowPerPage=50&Line=1&searchMethod=contains&Month="
url_end <- "&Day=15&timeframe=2&Year="
#this loop takes a little to long run. May need some tweaking with how the data is stored once implemented into the app
for(year in year1:CurrentYear){ #retrieves data from 2013 up to yesterday
if(year != CurrentYear){
scrape_mean_penticton_temp(12, year)
}else{
scrape_mean_penticton_temp(CurrentMonth, year)
}
combine_monthly_temps(12, year)
}
combine_years_temps(2013, CurrentYear-1, CurrentMonth)
dates <- as.data.frame(seq(as.Date("2013-01-01"), by = 1, len = nrow(meanTempsToDate)))
colnames(dates)[1] <- "date"
meanTempsToDate_1 <- meanTempsToDate %>%
arrange(year) %>%
bind_cols(., dates)
meanTempsToDate_1$month <- format(as.Date(meanTempsToDate_1$date), "%m")
meanTempsToDate_1$day <- format(as.Date(meanTempsToDate_1$date), "%d")
meanTempsToDate_1$tdiff <- rep(0, nrow(meanTempsToDate_1)) #initiated for the next for loop
meanTempsToDate_1$twoDayAvg <- rep(0, nrow(meanTempsToDate_1))
meanTempsToDate_1$day <- as.numeric(meanTempsToDate_1$day)
meanTempsToDate_1$month <- as.numeric(meanTempsToDate_1$month)
for(i in 1:nrow(meanTempsToDate_1)){
if(i == 1){
meanTempsToDate_1$twoDayAvg[1] <- meanTempsToDate_1$avgTemp[1]
}else if(is.na(meanTempsToDate_1$avgTemp[i])){
meanTempsToDate_1$twoDayAvg[i] <- NA
}else if(is.na(meanTempsToDate_1$twoDayAvg[i-1])){
meanTempsToDate_1$twoDayAvg[i] <- meanTempsToDate_1$avgTemp[i]
}else{
meanTempsToDate_1$twoDayAvg[i] <- (meanTempsToDate_1$avgTemp[i] + meanTempsToDate_1$avgTemp[i-1]) / 2
}
}
feb29th <- tibble(year = c(2013:2015, 2017:(CurrentYear - 1)), month = 2, day = 29, twoDayAvg = 0, tdiff = 0)#accounting for non leap years
meanTempsToDate_write <- bind_rows(meanTempsToDate_1, feb29th)
meanTempsToDate_dormancy <- meanTempsToDate_1 %>% #making the data be the same range as the historical data from Carl
filter(month != 5, month != 6, month != 7, month != 8)  %>%
filter(!(month == 9 & day <= 14)) %>%
filter(!(month == 4 & day >= 16)) %>%
bind_rows(., feb29th)
for(i in 1:nrow(meanTempsToDate_dormancy)){
m <- meanTempsToDate_dormancy$month[i]
d <- meanTempsToDate_dormancy$day[i]
diff <- meanTempsToDate_dormancy$twoDayAvg[i] - climate1981to2010_2$twoDayAvg[climate1981to2010_2$month == m & climate1981to2010_2$day == d]
if(is.na(diff)){
meanTempsToDate_dormancy$tdiff[i] <- 0
}else{
meanTempsToDate_dormancy$tdiff[i] <- diff
}
}
meanTempsToDate_dormancy_1 <- bind_rows(meanTempsToDate_dormancy, feb29th)
meanTempsToDate_dormancy$daynum <- calculate_day_v(meanTempsToDate_dormancy$day, meanTempsToDate_dormancy$month)
meanTempsToDate_dormancy_1<- meanTempsToDate_dormancy %>%
filter(daynum >= 1 & daynum <= 176) %>%
unnest(., daynum)
meanTempsToDate_dormancy_daynum <- unnest(meanTempsToDate_dormancy_1, daynum)
#would be great to turn this into a function that auto assigns names rather than manually doing this. Would be more robust for the app
#up until CurrentYear
climate2013to14 <- meanTempsToDate_dormancy_daynum %>%
filter((year == 2013 & daynum <= 73) | (year == 2014 & daynum >= 74)) %>%
select(daynum, tdiff, twoDayAvg) %>%
filter(!is.na(tdiff))
climate2014to15 <- meanTempsToDate_dormancy_daynum %>%
filter((year == 2014 & daynum <= 73) | (year == 2015 & daynum >= 74)) %>%
select(daynum, tdiff, twoDayAvg) %>%
filter(!is.na(tdiff))
climate2015to16 <- meanTempsToDate_dormancy_daynum %>%
filter((year == 2015 & daynum <= 73) | (year == 2016 & daynum >= 74)) %>%
select(daynum, tdiff, twoDayAvg) %>%
filter(!is.na(tdiff))
climate2016to17 <- meanTempsToDate_dormancy_daynum %>%
filter((year == 2016 & daynum <= 73) | (year == 2017 & daynum >= 74)) %>%
select(daynum, tdiff, twoDayAvg) %>%
filter(!is.na(tdiff))
climate2017to18 <- meanTempsToDate_dormancy_daynum %>%
filter((year == 2017 & daynum <= 73) | (year == 2018 & daynum >= 74)) %>%
select(daynum, tdiff, twoDayAvg) %>%
filter(!is.na(tdiff))
climate2018to19 <- meanTempsToDate_dormancy_daynum %>%
filter((year == 2018 & daynum <= 73) | (year == 2019 & daynum >= 74)) %>%
select(daynum, tdiff, twoDayAvg) %>%
filter(!is.na(tdiff))
climate2019to20 <- meanTempsToDate_dormancy_daynum %>%
filter((year == 2019 & daynum <= 73) | (year == 2020 & daynum >= 74)) %>%
select(daynum, tdiff, twoDayAvg) %>%
filter(!is.na(tdiff))
LTE <- c(1:176) %>%
as_tibble() %>%
mutate(estLTE = estimateLTE(value)) %>%
select(day = value, estLTE)
estimateLTEperday(LTE$estLTE)
estimatedLTE <- bind_cols(LTE, LTEperday)
######trying to calculate the initial values
meanTempsToDate_init <- meanTempsToDate_1 %>%
filter((month == 9 & day > 19)| (month == 10 & day < 21))
for(i in 1:nrow(meanTempsToDate_init)){
m <- meanTempsToDate_init$month[i]
d <- meanTempsToDate_init$day[i]
diff <- meanTempsToDate_init$twoDayAvg[i] - climate1981to2010_2$twoDayAvg[climate1981to2010_2$month == m & climate1981to2010_2$day == d]
if(is.na(diff)){
meanTempsToDate_init$tdiff[i] <- 0
}else{
meanTempsToDate_init$tdiff[i] <- diff
}
}
#LTE data between Sept 21st and Oct 20th are all arbitrary. I'm not going to take the values from excel so I can at least calculate the initial Oct 20th value.
# "Sep 21 to Oct 20 - initial hardiness accumulation phase.  Bud hardiness increases steadily. Estimated LTE/day grows from -0.15 to -0.50 (this is guesswork as there is no hardiness data available)."
#can use the output of these functions as the initial values for the finalLTEpredictions if you want.
estLTEperday <- c(-0.13, -0.15, -0.18, -0.20, -0.23, -0.25, -0.28, -0.30, -0.33, -0.35, -0.38, -0.40, -0.43, -0.45, -0.48, -0.50, -0.50, -0.50, -0.50, -0.50, -0.50, -0.50, -0.50, -0.50, -0.50, -0.50, -0.49, -0.48, -0.46, -0.45, -0.44)
estimatedLTE1 <- c(-1.35, -1.48, -1.63, -1.80, -2.00, -2.23, -2.48, -2.75, -3.05, -3.38, -3.73, -4.10, -4.50, -4.93, -5.38, -5.85, -6.35, -6.85, -7.35, -7.85, -8.35, -8.85, -9.35, -9.85, -10.35, -10.85, -11.35, -11.84, -12.32, -12.78, -13.23) %>%
as_tibble() %>%
select(estLTE = value) %>%
mutate(estLTEperday)
sept20 <- c(.29, -.5, 0, -2.6, .14, -.52, .29, .21) #pulled directly from Carl's model
GDDsums <- data.frame(GDD = c(rep(0,length(2013:(CurrentYear)))), year = 2013:(CurrentYear))
index <- 1
for(i in 2013:CurrentYear){
GDDsums$GDD[index] <- sum(unlist(aboveThresholdTemp_v(meanTempsToDate_1 %>% filter(year == i) %>% select(twoDayAvg) %>% .[[1]], 10)))
GDDsums$year[index] <- i
index <- index + 1
}
meanTempsToDate_1
CurrentYear
for(i in 2013:CurrentYear){
GDDsums$GDD[index] <- sum(unlist(aboveThresholdTemp_v(meanTempsToDate_1 %>% filter(year == i) %>% select(twoDayAvg) %>% .[[1]], 10)))
GDDsums$year[index] <- i
index <- index + 1
}
GDDsums <- data.frame(GDD = c(rep(0,length(2013:(CurrentYear)))), year = 2013:(CurrentYear))
GDDsums
for(i in 2013:CurrentYear){
GDDsums$GDD[index] <- sum(unlist(aboveThresholdTemp_v(meanTempsToDate_1 %>% filter(year == i) %>% select(twoDayAvg) %>% .[[1]], 10)))
GDDsums$year[index] <- i
index <- index + 1
}
index <- 1
for(i in 2013:CurrentYear){
GDDsums$GDD[index] <- sum(unlist(aboveThresholdTemp_v(meanTempsToDate_1 %>% filter(year == i) %>% select(twoDayAvg) %>% .[[1]], 10)))
GDDsums$year[index] <- i
index <- index + 1
}
GDDsums
GDDsums <- data.frame(GDD = c(rep(0,length(2013:(CurrentYear -1)))), year = 2013:(CurrentYear -1 ))
for(i in 2013:(CurrentYear-1)){
GDDsums$GDD[index] <- sum(unlist(aboveThresholdTemp_v(meanTempsToDate_1 %>% filter(year == i) %>% select(twoDayAvg) %>% .[[1]], 10)))
GDDsums$year[index] <- i
index <- index + 1
}
GDDsums
meanTempsToDate_1
unique(meanTempsTODate_1$year)
unique(meanTempsToDate_1$year)
GDDsums <- data.frame(GDD = c(rep(0,length(2013:(CurrentYear -1)))), year = 2013:(CurrentYear -1 ))
GDDsums
for(i in 2013:(CurrentYear-1)){
GDDsums$GDD[index] <- sum(unlist(aboveThresholdTemp_v(meanTempsToDate_1 %>% filter(year == i) %>% select(twoDayAvg) %>% .[[1]], 10)))
index <- index + 1
}
GDDsums
index <- 1
for(i in 2013:(CurrentYear-1)){
GDDsums$GDD[index] <- sum(unlist(aboveThresholdTemp_v(meanTempsToDate_1 %>% filter(year == i) %>% select(twoDayAvg) %>% .[[1]], 10)))
index <- index + 1
}
GDDsums$GDD
GDDsums
test
averageGDD <- mean(GDDsums$GDD)
Sep20_yearly <- data.frame("sep20" = calculate_Sep20_v(averageGDD, GDDsums$GDD),
"year" = c(2013:CurrentYear))
Sep20_yearly <- data.frame("sep20" = calculate_Sep20_v(averageGDD, GDDsums$GDD),
"year" = c(2013:CurrentYear - 1))
Sep20_yearly
historicGDDsums
GDDsums
Sep20_yearly <- data.frame("sep20" = calculate_Sep20_v(historicAverageGDD, historicGDDsums$GDD),
"year" = c((unique(historicTemps$year)[1]):(unique(historicTemps$year)[length(unique(historicTemps$year))])))
meanTempsToDate_init
CurrentMonth
CurrentYear
######trying to calculate the initial values
if(CurrentMonth == 9 & day > 19){
meanTempsToDate_init <- meanTempsToDate_1 %>%
filter(month == 9 & day > 19)
}else if(CurrentMonth == 10){
meanTempsToDate_init <- meanTempsToDate_1 %>%
filter((month == 9 & day > 19) | (month == 10 & day < 21))
}else if(CurrentMonth < 9 & CurrentMonth > 4){
meanTempsToDate_init <- NA
}
CurrentDay
######trying to calculate the initial values
if(CurrentMonth == 9 & CurrentDay > 19){
meanTempsToDate_init <- meanTempsToDate_1 %>%
filter(month == 9 & CurrentDay > 19)
}else if(CurrentMonth == 10){
meanTempsToDate_init <- meanTempsToDate_1 %>%
filter((month == 9 & day > 19) | (month == 10 & day < 21))
}else if(CurrentMonth < 9 & CurrentMonth > 4){
meanTempsToDate_init <- NA
}
meanTempsToDate_init
climateCurrent
#daynum == 73 is Dec 31st
if(CurrentMonth < 5){
climateCurrent <- currentTemps_dormancy_daynum %>%
filter((year == (CurrentYear - 1) & daynum <= 73)|(year == CurrentYear & daynum >= 74))
}else if(CurrentMonth > 8){
climateCurrent <- currentTemps_dormancy_daynum %>%
filter((year == CurrentYear & daynum <= 73))
}else if(CurrentMonth >= 5 & CurrentMonth <= 8){
climateCurrent <- allMeanTemps %>%
filter(year == CurrentYear)
}
climateCurrent
meanTempsToDate_init
Oct20s_df
currentTemps
if(CurrentMonth >= 5){
currentGDD <- sum(unlist(aboveThresholdTemp_v(currentTemps$twoDayAvg, 10)))
}else if(CurrentMonth <= 5){
currentGDD <- sum(unlist(aboveThresholdTemp_v(allMeanTemps %>% filter(year == (CurrentYear - 1)) %>% select(twoDayAvg) %>% .[[1]], 10)))
}
currentGDD
aboveThresholdTemp_v(currentTemps$twoDayAvg, 10)
sum(aboveThresholdTemp_v(currentTemps$twoDayAvg, 10))
Sep20_yearly <- data.frame("sep20" = calculate_Sep20_v(historicAverageGDD, currentGDD$GDD),
"year" = )
Sep20_yearly <- data.frame("sep20" = calculate_Sep20_v(historicAverageGDD, currentGDD),
"year" = )
Sep20_yearly <- data.frame("sep20" = calculate_Sep20(historicAverageGDD, currentGDD),
"year" = )
Sep20 <- calculate_Sep20(historicAverageGDD, currentGDD)
Sep20
meanTempsTODate_init
meanTempsToDate_init
calculate_Oct20th(Sep20, Sep20, Sep20, "Current")
finalLTEpredictions(Oct20, Oct20, Oct20, "Current")
Oct20 <- calculate_Oct20th(Sep20, Sep20, Sep20, "Current")
finalLTEpredictions(Oct20, Oct20, Oct20, "Current")
climateCurrent
